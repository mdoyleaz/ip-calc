{"version":3,"sources":["components/Navigation.js","components/calc/IpCalcTable.js","components/calc/CalcForm.js","containers/CalcContainer.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBarTop","react_default","a","createElement","Navbar","variant","collapseOnSelect","fixed","Brand","href","Toggle","Collapse","Nav","Link","key","Component","Navigation","Navigation_NavigationBarTop","IpCalcTable","tableHeaders","_","headerData","forEach","header","push","tableData","data","map","row","index","scope","subnet","gateway","broadcast","netmask","className","this","props","error","CalcForm","state","handleChange","_this","bind","Object","assertThisInitialized","handleSubmit","event","setState","target","value","_this2","httpRequest","method","headers","Accept","Content-Type","body","JSON","stringify","split_prefix","fetch","then","response","json","setSplit","Form","Group","Label","Control","onChange","placeholder","Button","type","onClick","IpCalc","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setTableContent","tableContent","pageContent","tableError","length","calc_CalcForm","calc_IpCalcTable","App","components_Navigation","CalcContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efe0bced.chunk.js","sourcesContent":["import '../css/Navigation.css';\n\nimport React, {Component} from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nclass NavigationBarTop extends Component {\n  render() {\n    return (<Navbar variant=\"dark\" collapseOnSelect=\"collapseOnSelect\" fixed=\"top\">\n        <Navbar.Brand href=\"#brand\">\n          IP Calculator\n        </Navbar.Brand>\n        <Navbar.Toggle/>\n      <Navbar.Collapse>\n        <Nav>\n          <Nav.Link key={1} href=\"#ping\">\n            Pingy\n          </Nav.Link>\n          <Nav.Link key={2} href=\"#calc\">\n            IP calc\n          </Nav.Link>\n        </Nav>\n\n      </Navbar.Collapse>\n    </Navbar>)\n  };\n};\n\nclass Navigation extends Component {\n  render() {\n    return (<NavigationBarTop/>)\n  }\n}\n\nexport default Navigation;\n","import '../../css/IpCalc.css';\n\nimport React, { Component } from 'react';\n\nclass IpCalcTable extends Component {\n\n  tableHeaders = _ => {\n    const headers = [\n      \"#\",\n      \"New Subnet\",\n      \"Gateway\",\n      \"Broadcast\",\n      \"Netmask\",\n      \"Actions\"\n    ]\n\n    let headerData = [];\n    headers.forEach(header => {\n      headerData.push(<th>{header}</th>);\n    })\n\n    return headerData\n  }\n\n  tableData = (data) => {\n\n    let tableData = data.map((row, index) => {\n      return (<tr key={index}>\n        <th scope=\"row\">{index + 1}</th>\n        <td >{row.subnet}</td>\n        <td >{row.gateway}</td>\n        <td >{row.broadcast}</td>\n        <td>{row.netmask}</td>\n        <td>\n          <button className='btn btn-primary'>Button</button>\n        </td>\n      </tr>)\n    })\n    return tableData\n  }\n\n  render() {\n    const data = this.props.data\n\n    if ('error' in data) {\n      return (\n        <div>\n          <h3>API Error</h3>\n          <h5>{data.error}</h5>\n        </div>\n      )\n    } else {\n      const tableHeaders = this.tableHeaders()\n      const tableData = this.tableData(data)\n      return (<table className=\"table table-hover table-responsive table-striped\">\n        <thead>\n          <tr>\n            {tableHeaders}\n          </tr>\n        </thead>\n        <tbody>\n          {tableData}\n        </tbody>\n      </table>);\n    }\n  }\n};\n\nexport default IpCalcTable;\n","import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nclass CalcForm extends Component {\n\n  state = {\n    subnet: ''\n  }\n\n  handleChange = this.handleChange.bind(this);\n  handleSubmit = this.handleSubmit.bind(this);\n\n  handleChange(event) {\n    this.setState({ subnet: event.target.value })\n  }\n\n  handleSubmit(event) {\n    const httpRequest = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ subnet: this.state.subnet, split_prefix: 30 })\n    }\n\n    const url = `http://127.0.0.1:5000/api/calc/split`\n\n    fetch(url, httpRequest).then(\n      response => response.json()).then(\n        response => this.props.setSplit(response));\n  }\n\n  render() {\n    return (<div className=\"App\">\n      <Form.Group>\n        <Form.Label>Subnet</Form.Label>\n        <Form.Control className='subnet-form' onChange={this.handleChange} placeholder=\"Enter Subnet\" />\n        <Button type=\"submit\" onClick={this.handleSubmit}>\n          Calculate It</Button>\n      </Form.Group>\n    </div>);\n  }\n}\n\nexport default CalcForm;\n","import '../css/IpCalc.css';\n\nimport React, {Component} from \"react\";\n\nimport IpCalcTable from \"../components/calc/IpCalcTable\";\nimport CalcForm from \"../components/calc/CalcForm\";\n\nclass IpCalc extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageContent: null,\n      tableContent: [],\n      tableError: null\n    }\n\n    this.setTableContent = this.setTableContent.bind(this);\n  }\n\n  setTableContent = (data) => {\n    this.setState(state => ({tableContent: data}));\n  }\n\n  render() {\n    if(this.state.tableContent.length === 0){\n      return <CalcForm setSplit={this.setTableContent} />\n    } else {\n      return (<div>\n        <CalcForm setSplit={this.setTableContent} />\n        <div className=\"calcTable\">\n        <IpCalcTable data={this.state.tableContent} />\n        </div>\n      </div>)\n    }\n  }\n}\n\nexport default IpCalc;\n","import React, {Component} from 'react';\n\nimport Navigation from './components/Navigation';\nimport CalcContainer from './containers/CalcContainer';\n\nimport './css/App.css';\n\nclass App extends Component {\n\n  render() {\n    return (<div>\n      <Navigation />\n      <CalcContainer />\n    </div>)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}